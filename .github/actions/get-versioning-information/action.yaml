name: Get versioning information
description: Gets versioning information for a workflow run based on the current state of the repository
inputs:
  github_token:
    description: The GitHub token to use for authentication
outputs:
  version:
    description: The version to use for the workflow run
    value: ${{ steps.get_version.outputs.version }}
  next_release_version:
    description: The next release version that will be released, or empty string if there is no next release
    value: ${{ steps.get_next_release_version.outputs.version }}
  create_release:
    description: Whether a release should be created for the current workflow run
    value: ${{ steps.set_create_release.outputs.create_release }}
  has_unreleased_changes:
    description: Whether there are unreleased changes in the repository
    value: ${{ steps.set_has_unreleased_changes.outputs.has_unreleased_changes }}
runs:
  using: composite
  steps:
    - name: Download auto
      shell: bash
      run: |
        curl -kL -o - https://github.com/intuit/auto/releases/download/v11.3.0/auto-linux.gz | gunzip > ${{ runner.temp }}/auto
        chmod +x ${{ runner.temp }}/auto

    - name: Get next release version
      shell: bash
      id: get_next_release_version
      run: echo "version=$(${{ runner.temp }}/auto latest --dry-run --quiet --no-version-prefix --name github-actions[bot] --email github-actions[bot]@users.noreply.github.com)" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Print next release version
      shell: bash
      run: echo "${{ steps.get_next_release_version.outputs.version }}"

    - name: Get next release semver bump type
      shell: bash
      id: get_next_release_semver_bump_type
      run: echo "bump_type=$(${{ runner.temp }}/auto version --only-publish-with-release-label)" >> $GITHUB_OUTPUT
      env:
        GH_TOKEN: ${{ inputs.github_token }}

    - name: Print next release semver bump type
      shell: bash
      run: echo "${{ steps.get_next_release_semver_bump_type.outputs.bump_type }}"

    - name: Get next pre-release version for when next release version does not exist
      id: get_next_pre_release_version
      uses: paulhatch/semantic-version@v5.4.0
      with:
        tag_prefix: "v"
        version_format: "${major}.${minor}.${patch}"

    - name: Get branch names
      id: branch_names
      uses: OctopusDeploy/util-actions/current-branch-name@current-branch-name.0.1.0

    - name: Get pre-release version
      shell: bash
      id: get_pre_release_version
      run: echo "version=${{ steps.get_next_release_version.outputs.version || steps.get_next_pre_release_version.outputs.version }}-${{ steps.branch_names.outputs.branch_name }}.${{ github.run_number }}-${{ github.run_attempt }}" >> $GITHUB_OUTPUT

    - name: Set whether to create a release
      shell: bash
      id: set_create_release
      run: echo "create_release=${{ github.ref == 'refs/heads/main' && steps.get_next_release_semver_bump_type.outputs.bump_type != '' }}" >> $GITHUB_OUTPUT

    - name: Set whether there are unreleased changes
      shell: bash
      id: set_has_unreleased_changes
      run: echo "has_unreleased_changes=${{ steps.get_next_release_semver_bump_type.outputs.bump_type == '' && steps.get_next_release_version.outputs.version != '' }}" >> $GITHUB_OUTPUT

    - name: Get version
      shell: bash
      id: get_version
      run: echo "version=${{ steps.set_create_release.outputs.create_release == 'true' && steps.get_next_release_version.outputs.version || steps.get_pre_release_version.outputs.version }}" >> $GITHUB_OUTPUT

    - name: Print version
      shell: bash
      run: echo "Version ${{ steps.get_version.outputs.version }}"
